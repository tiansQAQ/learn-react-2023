// 声明useEffect
import React, { useEffect } from 'react'

// 某些组件需要与外部系统同步。例如，您可能希望根据 React 状态控制非 React 组件，设置服务器连接，或者在组件出现在屏幕上时发送分析日志。
// Effects允许你在渲染后运行一些代码，以便你可以将你的组件与 React 之外的一些系统同步。

// 什么是Effects，它们与事件有何不同？

// 在进入Effects之前，你需要熟悉 React 组件中的两种逻辑：

// 1. 呈现代码（在描述 UI 中介绍）位于组件的顶层。这是你获取props和state的地方，转换它们，然后返回你想在屏幕上看到的JSX。呈现代码必须是纯的。就像数学公式一样，它应该只计算结果，而不做任何其他事情。

// 2. 事件处理程序（在添加交互性中介绍）是组件中的嵌套函数，用于执行操作，而不仅仅是计算它们。事件处理程序可能会更新输入字段、提交 HTTP POST 请求购买产品或将用户导航到另一个屏幕。事件处理程序包含由特定用户操作（例如，按钮单击或键入）引起的“side effects” （它们更改程序的状态）。

// 有时这还不够。考虑一个 ChatRoom聊天 组件，只要它在屏幕上可见，它就必须连接到聊天服务器。连接到服务器不是纯粹的计算（这是一种effect），因此在渲染期间不会发生。但是，没有像单击这样的单个特定事件会导致显示ChatRoom。

// Effects允许您指定由呈现本身而不是特定事件引起的effects。在聊天中发送消息是一个事件，因为它是由用户单击特定按钮直接引起的。但是，设置服务器连接是一种Effect，因为无论哪种交互导致组件出现，它都应该发生。Effects在屏幕更新后的提交结束时运行。这是将 React 组件与某些外部系统（如网络或第三方库）同步的好时机。

// 若要编写Effect，请按照以下三个步骤操作：

// 1. 声明Effect。默认情况下，效果将在每次渲染后运行。
// 2. 指定Effect依赖项。大多数Effect只应在需要时重新运行，而不是在每次渲染后重新运行。例如，淡入动画应仅在组件出现时触发。仅当组件出现和消失或聊天室更改时，才应连接和断开与聊天室的连接。您将学习如何通过指定依赖项来控制这一点。
// 3. 根据需要添加清理。某些Effects需要指定如何停止、撤消或清理它们正在执行的操作。例如，“连接”需要“断开连接”，“订阅”需要“取消订阅”，“获取”需要“取消”或“忽略”。您将学习如何通过返回清理函数来执行此操作。

// 每次组件渲染时，React 都会更新屏幕，然后在 useEffect 中运行代码。换句话说， useEffect “延迟”一段代码运行，直到该渲染反映在屏幕上。
export default function MyComponent() {
  // 然后，在组件的顶层调用它，并在 Effect 中放置一些代码：
  useEffect(() => {
    // Code here will run after *every* render
  })
  return <div>MyComponent</div>
}
